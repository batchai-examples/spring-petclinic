{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.model;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n\nimport jakarta.validation.ConstraintViolation;\nimport jakarta.validation.Validator;\n\n/**\n * @author Michael Isvy Simple test to make sure that Bean Validation is working (useful\n * when upgrading to a new version of Hibernate Validator/ Bean Validation)\n */\nclass ValidatorTests {\n\n\tprivate Validator createValidator() {\n\t\tLocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();\n\t\tlocalValidatorFactoryBean.afterPropertiesSet();\n\t\treturn localValidatorFactoryBean;\n\t}\n\n\t@Test\n\tvoid shouldNotValidateWhenFirstNameEmpty() {\n\n\t\tLocaleContextHolder.setLocale(Locale.ENGLISH);\n\t\tPerson person = new Person();\n\t\tperson.setFirstName(\"\");\n\t\tperson.setLastName(\"smith\");\n\n\t\tValidator validator = createValidator();\n\t\tSet\u003cConstraintViolation\u003cPerson\u003e\u003e constraintViolations = validator.validate(person);\n\n\t\tassertThat(constraintViolations).hasSize(1);\n\t\tConstraintViolation\u003cPerson\u003e violation = constraintViolations.iterator().next();\n\t\tassertThat(violation.getPropertyPath()).hasToString(\"firstName\");\n\t\tassertThat(violation.getMessage()).isEqualTo(\"must not be blank\");\n\t}\n\n}\n",
    "original_code": "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.model;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport java.util.Locale;\nimport java.util.Set;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.context.i18n.LocaleContextHolder;\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n\nimport jakarta.validation.ConstraintViolation;\nimport jakarta.validation.Validator;\n\n/**\n * @author Michael Isvy Simple test to make sure that Bean Validation is working (useful\n * when upgrading to a new version of Hibernate Validator/ Bean Validation)\n */\nclass ValidatorTests {\n\n\tprivate Validator createValidator() {\n\t\tLocalValidatorFactoryBean localValidatorFactoryBean = new LocalValidatorFactoryBean();\n\t\tlocalValidatorFactoryBean.afterPropertiesSet();\n\t\treturn localValidatorFactoryBean;\n\t}\n\n\t@Test\n\tvoid shouldNotValidateWhenFirstNameEmpty() {\n\n\t\tLocaleContextHolder.setLocale(Locale.ENGLISH);\n\t\tPerson person = new Person();\n\t\tperson.setFirstName(\"\");\n\t\tperson.setLastName(\"smith\");\n\n\t\tValidator validator = createValidator();\n\t\tSet\u003cConstraintViolation\u003cPerson\u003e\u003e constraintViolations = validator.validate(person);\n\n\t\tassertThat(constraintViolations).hasSize(1);\n\t\tConstraintViolation\u003cPerson\u003e violation = constraintViolations.iterator().next();\n\t\tassertThat(violation.getPropertyPath()).hasToString(\"firstName\");\n\t\tassertThat(violation.getMessage()).isEqualTo(\"must not be blank\");\n\t}\n\n}\n",
    "path": "src/test/java/org/springframework/samples/petclinic/model/ValidatorTests.java",
    "model_usage_metrics": {
        "Duration": 1063373456,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}