{
    "path": "src/main/java/org/springframework/samples/petclinic/owner/Visit.java",
    "model_usage_metrics": {
        "Duration": 12479064394,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    },
    "test_file_path": "src/test/java/org/springframework/samples/petclinic/owner/VisitTest.java",
    "existing_test_code": "",
    "original_code": "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.springframework.samples.petclinic.owner;\n\nimport java.time.LocalDate;\n\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.samples.petclinic.model.BaseEntity;\n\nimport jakarta.persistence.Column;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.Table;\nimport jakarta.validation.constraints.NotBlank;\n\n/**\n * Simple JavaBean domain object representing a visit.\n *\n * @author Ken Krebs\n * @author Dave Syer\n */\n@Entity\n@Table(name = \"visits\")\npublic class Visit extends BaseEntity {\n\n\t@Column(name = \"visit_date\")\n\t@DateTimeFormat(pattern = \"yyyy-MM-dd\")\n\tprivate LocalDate date;\n\n\t@NotBlank\n\tprivate String description;\n\n\t/**\n\t * Creates a new instance of Visit for the current date\n\t */\n\tpublic Visit() {\n\t\tthis.date = LocalDate.now();\n\t}\n\n\tpublic LocalDate getDate() {\n\t\treturn this.date;\n\t}\n\n\tpublic void setDate(LocalDate date) {\n\t\tthis.date = date;\n\t}\n\n\tpublic String getDescription() {\n\t\treturn this.description;\n\t}\n\n\tpublic void setDescription(String description) {\n\t\tthis.description = description;\n\t}\n\n}\n",
    "test_code": "package org.springframework.samples.petclinic.owner;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\nimport java.time.LocalDate;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class VisitTest {\n\n    private Visit visit;\n\n    @BeforeEach\n    public void setUp() {\n        visit = new Visit();\n    }\n\n    /**\n     * Test case to verify that the default constructor initializes the date to the current date.\n     */\n    @Test\n    public void testDefaultConstructor() {\n        assertEquals(LocalDate.now(), visit.getDate());\n    }\n\n    /**\n     * Test case to verify that the getDate method returns the correct date.\n     */\n    @Test\n    public void testGetDate() {\n        LocalDate expectedDate = LocalDate.of(2023, 10, 1);\n        visit.setDate(expectedDate);\n        assertEquals(expectedDate, visit.getDate());\n    }\n\n    /**\n     * Test case to verify that the setDate method sets the date correctly.\n     */\n    @Test\n    public void testSetDate() {\n        LocalDate expectedDate = LocalDate.of(2023, 10, 1);\n        visit.setDate(expectedDate);\n        assertEquals(expectedDate, visit.getDate());\n    }\n\n    /**\n     * Test case to verify that the getDescription method returns the correct description.\n     */\n    @Test\n    public void testGetDescription() {\n        String expectedDescription = \"Check-up\";\n        visit.setDescription(expectedDescription);\n        assertEquals(expectedDescription, visit.getDescription());\n    }\n\n    /**\n     * Test case to verify that the setDescription method sets the description correctly.\n     */\n    @Test\n    public void testSetDescription() {\n        String expectedDescription = \"Check-up\";\n        visit.setDescription(expectedDescription);\n        assertEquals(expectedDescription, visit.getDescription());\n    }\n\n    /**\n     * Test case to verify that the getDescription method throws a NullPointerException when called on a null object.\n     */\n    @Test\n    public void testGetDescriptionNullPointerException() {\n        Visit nullVisit = null;\n        assertThrows(NullPointerException.class, () -\u003e nullVisit.getDescription());\n    }\n\n    /**\n     * Test case to verify that the setDate method throws an IllegalArgumentException when passed a null date.\n     */\n    @Test\n    public void testSetDateIllegalArgumentException() {\n        assertThrows(IllegalArgumentException.class, () -\u003e visit.setDate(null));\n    }\n\n    /**\n     * Test case to verify that the setDate method throws an IllegalArgumentException when passed an invalid date format.\n     */\n    @Test\n    public void testSetDateInvalidDateFormat() {\n        LocalDate expectedDate = LocalDate.of(2023, 10, 1);\n        visit.setDate(expectedDate);\n        assertThrows(IllegalArgumentException.class, () -\u003e visit.setDate(LocalDate.parse(\"invalid-date\")));\n    }\n\n    /**\n     * Test case to verify that the Visit object is not null after creation.\n     */\n    @Test\n    public void testVisitNotNull() {\n        assertNotNull(visit);\n    }\n}\n",
    "amount_of_generated_test_cases": 10,
    "single_test_run_command": "mvn test -Dtest=org.springframework.samples.petclinic.owner.VisitTest"
}