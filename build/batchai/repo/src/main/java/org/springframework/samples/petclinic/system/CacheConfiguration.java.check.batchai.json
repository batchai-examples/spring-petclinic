{
    "has_issue": false,
    "overall_severity": "",
    "issues": [],
    "fixed_code": "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.system;\n\nimport org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.cache.configuration.MutableConfiguration;\n\n/**\n * Cache configuration intended for caches providing the JCache API. This configuration\n * creates the used cache for the application and enables statistics that become\n * accessible via JMX.\n */\n@Configuration(proxyBeanMethods = false)\n@EnableCaching\nclass CacheConfiguration {\n\n\t@Bean\n\tpublic JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {\n\t\treturn cm -\u003e cm.createCache(\"vets\", cacheConfiguration());\n\t}\n\n\t/**\n\t * Create a simple configuration that enable statistics via the JCache programmatic\n\t * configuration API.\n\t * \u003cp\u003e\n\t * Within the configuration object that is provided by the JCache API standard, there\n\t * is only a very limited set of configuration options. The really relevant\n\t * configuration options (like the size limit) must be set via a configuration\n\t * mechanism that is provided by the selected JCache implementation.\n\t */\n\tprivate javax.cache.configuration.Configuration\u003cObject, Object\u003e cacheConfiguration() {\n\t\treturn new MutableConfiguration\u003c\u003e().setStatisticsEnabled(true);\n\t}\n\n}\n",
    "original_code": "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.samples.petclinic.system;\n\nimport org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.cache.configuration.MutableConfiguration;\n\n/**\n * Cache configuration intended for caches providing the JCache API. This configuration\n * creates the used cache for the application and enables statistics that become\n * accessible via JMX.\n */\n@Configuration(proxyBeanMethods = false)\n@EnableCaching\nclass CacheConfiguration {\n\n\t@Bean\n\tpublic JCacheManagerCustomizer petclinicCacheConfigurationCustomizer() {\n\t\treturn cm -\u003e cm.createCache(\"vets\", cacheConfiguration());\n\t}\n\n\t/**\n\t * Create a simple configuration that enable statistics via the JCache programmatic\n\t * configuration API.\n\t * \u003cp\u003e\n\t * Within the configuration object that is provided by the JCache API standard, there\n\t * is only a very limited set of configuration options. The really relevant\n\t * configuration options (like the size limit) must be set via a configuration\n\t * mechanism that is provided by the selected JCache implementation.\n\t */\n\tprivate javax.cache.configuration.Configuration\u003cObject, Object\u003e cacheConfiguration() {\n\t\treturn new MutableConfiguration\u003c\u003e().setStatisticsEnabled(true);\n\t}\n\n}\n",
    "path": "src/main/java/org/springframework/samples/petclinic/system/CacheConfiguration.java",
    "model_usage_metrics": {
        "Duration": 1130334932,
        "OpenAiUsage": {
            "completion_tokens": 0,
            "prompt_tokens": 0,
            "total_tokens": 0,
            "completion_tokens_details": {
                "accepted_prediction_tokens": 0,
                "audio_tokens": 0,
                "reasoning_tokens": 0,
                "rejected_prediction_tokens": 0
            },
            "prompt_tokens_details": {
                "audio_tokens": 0,
                "cached_tokens": 0
            }
        }
    }
}